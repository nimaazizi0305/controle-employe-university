# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'controle_employe_university.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from os import write
from PyQt5 import QtCore, QtGui, QtWidgets
import datetime
import jdatetime
from PyQt5.QtWidgets import QMessageBox
from datetime import date
import sqlite3
import csv


connect=sqlite3.connect("controle_employe_university.db")

# creat cursor
my_cursor=connect.cursor() # for execute code


class Ui_control_arrivals_and_departures_employe(object):
    def setupUi(self, control_arrivals_and_departures_employe):
        control_arrivals_and_departures_employe.setObjectName("control_arrivals_and_departures_employe")
        control_arrivals_and_departures_employe.resize(645, 598)
        control_arrivals_and_departures_employe.setWindowTitle("")
        control_arrivals_and_departures_employe.setLayoutDirection(QtCore.Qt.RightToLeft)
        control_arrivals_and_departures_employe.setStyleSheet("background-color: rgb(250, 255, 149);")
        control_arrivals_and_departures_employe.setLocale(QtCore.QLocale(QtCore.QLocale.Persian, QtCore.QLocale.Iran))
        self.verticalLayout = QtWidgets.QVBoxLayout(control_arrivals_and_departures_employe)
        self.verticalLayout.setObjectName("verticalLayout")
        self.tabWidget = QtWidgets.QTabWidget(control_arrivals_and_departures_employe)
        font = QtGui.QFont()
        font.setFamily("Tahoma")
        font.setPointSize(10)
        self.tabWidget.setFont(font)
        self.tabWidget.setLayoutDirection(QtCore.Qt.RightToLeft)
        self.tabWidget.setStyleSheet("background-color: rgb(255, 255, 0);\n"
"background-color: rgb(255, 226, 0);")
        self.tabWidget.setObjectName("tabWidget")
        self.showdata = QtWidgets.QWidget()
        self.showdata.setObjectName("showdata")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.showdata)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.frame = QtWidgets.QFrame(self.showdata)
        self.frame.setStyleSheet("background-color: rgb(255, 242, 89);")
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.search_box = QtWidgets.QGroupBox(self.frame)
        self.search_box.setGeometry(QtCore.QRect(10, 40, 581, 101))
        self.search_box.setStyleSheet("background-color: rgb(255, 255, 127);")
        self.search_box.setObjectName("search_box")
        self.lbl_code_search = QtWidgets.QLabel(self.search_box)
        self.lbl_code_search.setGeometry(QtCore.QRect(450, 30, 51, 20))
        self.lbl_code_search.setObjectName("lbl_code_search")
        self.enter_search_code = QtWidgets.QLineEdit(self.search_box)
        self.enter_search_code.setGeometry(QtCore.QRect(250, 30, 171, 21))
        self.enter_search_code.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.enter_search_code.setObjectName("enter_search_code")
        self.btn_search = QtWidgets.QPushButton(self.search_box,clicked=lambda:self.search_employe())
        self.btn_search.setGeometry(QtCore.QRect(100, 30, 91, 21))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.btn_search.setFont(font)
        self.btn_search.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.btn_search.setStyleSheet("background-color: rgb(196, 255, 234);")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("../../icons/icons/search_icon.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.btn_search.setIcon(icon)
        self.btn_search.setObjectName("btn_search")
        self.btn_search_by_date = QtWidgets.QPushButton(self.search_box,clicked=lambda:self.search_by_date())
        self.btn_search_by_date.setGeometry(QtCore.QRect(100, 70, 91, 21))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.btn_search_by_date.setFont(font)
        self.btn_search_by_date.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.btn_search_by_date.setStyleSheet("background-color: rgb(196, 255, 234);")
        self.btn_search_by_date.setIcon(icon)
        self.btn_search_by_date.setIconSize(QtCore.QSize(20, 20))
        self.btn_search_by_date.setObjectName("btn_search_by_date")
        self.enter_date_search = QtWidgets.QLineEdit(self.search_box)
        self.enter_date_search.setGeometry(QtCore.QRect(250, 70, 171, 21))
        self.enter_date_search.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.enter_date_search.setObjectName("enter_date_search")
        self.lbl_date_search = QtWidgets.QLabel(self.search_box)
        self.lbl_date_search.setGeometry(QtCore.QRect(430, 70, 71, 20))
        self.lbl_date_search.setObjectName("lbl_date_search")
        self.delete_box = QtWidgets.QGroupBox(self.frame)
        self.delete_box.setGeometry(QtCore.QRect(10, 150, 361, 111))
        self.delete_box.setStyleSheet("background-color: rgb(255, 255, 127);")
        self.delete_box.setObjectName("delete_box")
        self.btn_delete_by_hand = QtWidgets.QPushButton(self.delete_box,clicked=lambda:self.delete_hand())
        self.btn_delete_by_hand.setGeometry(QtCore.QRect(20, 40, 101, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.btn_delete_by_hand.setFont(font)
        self.btn_delete_by_hand.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.btn_delete_by_hand.setStyleSheet("background-color: rgb(196, 255, 234);")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("../../icons/icons/delete_icon.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.btn_delete_by_hand.setIcon(icon1)
        self.btn_delete_by_hand.setIconSize(QtCore.QSize(20, 20))
        self.btn_delete_by_hand.setObjectName("btn_delete_by_hand")
        self.lbl_code_for_delete_by_hand = QtWidgets.QLabel(self.delete_box)
        self.lbl_code_for_delete_by_hand.setGeometry(QtCore.QRect(290, 30, 61, 20))
        self.lbl_code_for_delete_by_hand.setObjectName("lbl_code_for_delete_by_hand")
        self.enter_code_for_delete_by_hand = QtWidgets.QLineEdit(self.delete_box)
        self.enter_code_for_delete_by_hand.setGeometry(QtCore.QRect(140, 30, 141, 21))
        self.enter_code_for_delete_by_hand.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.enter_code_for_delete_by_hand.setObjectName("enter_code_for_delete_by_hand")
        self.lbl_time_enter_for_delete_by_hand = QtWidgets.QLabel(self.delete_box)
        self.lbl_time_enter_for_delete_by_hand.setGeometry(QtCore.QRect(290, 60, 61, 20))
        self.lbl_time_enter_for_delete_by_hand.setObjectName("lbl_time_enter_for_delete_by_hand")
        self.enter_time_enter_for_delete_by_hand = QtWidgets.QLineEdit(self.delete_box)
        self.enter_time_enter_for_delete_by_hand.setGeometry(QtCore.QRect(140, 60, 141, 21))
        self.enter_time_enter_for_delete_by_hand.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.enter_time_enter_for_delete_by_hand.setObjectName("enter_time_enter_for_delete_by_hand")
        self.show_box = QtWidgets.QGroupBox(self.frame)
        self.show_box.setGeometry(QtCore.QRect(10, 270, 581, 251))
        self.show_box.setStyleSheet("background-color: rgb(255, 255, 127);")
        self.show_box.setObjectName("show_box")
        self.tableWidget = QtWidgets.QTableWidget(self.show_box)
        self.tableWidget.setGeometry(QtCore.QRect(10, 70, 561, 171))
        self.tableWidget.setLayoutDirection(QtCore.Qt.RightToLeft)
        self.tableWidget.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(12)
        self.tableWidget.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(5, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(6, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(7, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(8, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(9, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(10, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(11, item)
        self.btn_show_data = QtWidgets.QPushButton(self.show_box,clicked=lambda:self.show_data())
        self.btn_show_data.setGeometry(QtCore.QRect(50, 20, 111, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.btn_show_data.setFont(font)
        self.btn_show_data.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.btn_show_data.setStyleSheet("background-color: rgb(196, 255, 234);")
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap("../Python/icons/icons/show_data_icon.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.btn_show_data.setIcon(icon2)
        self.btn_show_data.setIconSize(QtCore.QSize(20, 20))
        self.btn_show_data.setObjectName("btn_show_data")
        self.btn_save_excel = QtWidgets.QPushButton(self.show_box,clicked=lambda:self.save_Excel_file())
        self.btn_save_excel.setGeometry(QtCore.QRect(190, 20, 121, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.btn_save_excel.setFont(font)
        self.btn_save_excel.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.btn_save_excel.setStyleSheet("background-color: rgb(196, 255, 234);")
        self.btn_save_excel.setIcon(icon2)
        self.btn_save_excel.setIconSize(QtCore.QSize(0, 0))
        self.btn_save_excel.setObjectName("btn_save_excel")
        self.lbl_Excel = QtWidgets.QLabel(self.show_box)
        self.lbl_Excel.setGeometry(QtCore.QRect(476, 30, 81, 20))
        self.lbl_Excel.setObjectName("lbl_Excel")
        self.enter_name_excel_file = QtWidgets.QLineEdit(self.show_box)
        self.enter_name_excel_file.setGeometry(QtCore.QRect(330, 30, 141, 21))
        self.enter_name_excel_file.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.enter_name_excel_file.setObjectName("enter_name_excel_file")
        self.groupBox = QtWidgets.QGroupBox(self.frame)
        self.groupBox = QtWidgets.QGroupBox(self.frame)
        self.groupBox.setGeometry(QtCore.QRect(380, 150, 211, 111))
        self.groupBox.setStyleSheet("background-color: rgb(255, 255, 127);")
        self.groupBox.setObjectName("groupBox")
        self.lbl_delete_by_date_time = QtWidgets.QLabel(self.groupBox)
        self.lbl_delete_by_date_time.setGeometry(QtCore.QRect(150, 30, 51, 20))
        self.lbl_delete_by_date_time.setObjectName("lbl_delete_by_date_time")
        self.enter_date_time_delete = QtWidgets.QLineEdit(self.groupBox)
        self.enter_date_time_delete.setGeometry(QtCore.QRect(10, 30, 141, 21))
        self.enter_date_time_delete.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.enter_date_time_delete.setObjectName("enter_date_time_delete")
        self.btn_delete_by_date_time = QtWidgets.QPushButton(self.groupBox,clicked=lambda:self.delete_by_date())
        self.btn_delete_by_date_time.setGeometry(QtCore.QRect(30, 60, 101, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.btn_delete_by_date_time.setFont(font)
        self.btn_delete_by_date_time.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.btn_delete_by_date_time.setStyleSheet("background-color: rgb(196, 255, 234);")
        self.btn_delete_by_date_time.setIcon(icon1)
        self.btn_delete_by_date_time.setIconSize(QtCore.QSize(20, 20))
        self.btn_delete_by_date_time.setObjectName("btn_delete_by_date_time")
        self.label = QtWidgets.QLabel(self.frame)
        self.label.setGeometry(QtCore.QRect(100, 10, 421, 20))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.verticalLayout_2.addWidget(self.frame)
        self.tabWidget.addTab(self.showdata, "")
        self.enter = QtWidgets.QWidget()
        self.enter.setObjectName("enter")
        self.frame_2 = QtWidgets.QFrame(self.enter)
        self.frame_2.setGeometry(QtCore.QRect(10, 9, 601, 531))
        self.frame_2.setStyleSheet("background-color: rgb(255, 242, 89);")
        self.frame_2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_2.setObjectName("frame_2")
        self.enter_part = QtWidgets.QGroupBox(self.frame_2)
        self.enter_part.setGeometry(QtCore.QRect(10, 9, 581, 511))
        self.enter_part.setStyleSheet("background-color: rgb(255, 255, 127);")
        self.enter_part.setObjectName("enter_part")
        self.lbl_enetr_code = QtWidgets.QLabel(self.enter_part)
        self.lbl_enetr_code.setGeometry(QtCore.QRect(400, 170, 81, 16))
        self.lbl_enetr_code.setObjectName("lbl_enetr_code")
        self.enter_enter_code = QtWidgets.QLineEdit(self.enter_part)
        self.enter_enter_code.setGeometry(QtCore.QRect(192, 170, 191, 20))
        self.enter_enter_code.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.enter_enter_code.setObjectName("enter_enter_code")
        self.btn_enter = QtWidgets.QPushButton(self.enter_part,clicked=lambda:self.enter_employe())
        self.btn_enter.setGeometry(QtCore.QRect(230, 230, 131, 51))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.btn_enter.setFont(font)
        self.btn_enter.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.btn_enter.setStyleSheet("background-color: rgb(196, 255, 234);")
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap("../../icons/icons/login_enter.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.btn_enter.setIcon(icon3)
        self.btn_enter.setIconSize(QtCore.QSize(20, 20))
        self.btn_enter.setObjectName("btn_enter")
        self.tabWidget.addTab(self.enter, "")
        self.Exit = QtWidgets.QWidget()
        self.Exit.setObjectName("Exit")
        self.frame_3 = QtWidgets.QFrame(self.Exit)
        self.frame_3.setGeometry(QtCore.QRect(10, 10, 601, 531))
        self.frame_3.setStyleSheet("background-color: rgb(255, 242, 89);")
        self.frame_3.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_3.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_3.setObjectName("frame_3")
        self.exit_part = QtWidgets.QGroupBox(self.frame_3)
        self.exit_part.setGeometry(QtCore.QRect(10, 9, 581, 511))
        self.exit_part.setStyleSheet("background-color: rgb(255, 255, 127);")
        self.exit_part.setObjectName("exit_part")
        self.lbl_exit_code = QtWidgets.QLabel(self.exit_part)
        self.lbl_exit_code.setGeometry(QtCore.QRect(400, 170, 81, 16))
        self.lbl_exit_code.setObjectName("lbl_exit_code")
        self.enter_exit_code = QtWidgets.QLineEdit(self.exit_part)
        self.enter_exit_code.setGeometry(QtCore.QRect(192, 170, 191, 20))
        self.enter_exit_code.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.enter_exit_code.setObjectName("enter_exit_code")
        self.btn_exit = QtWidgets.QPushButton(self.exit_part,clicked=lambda:self.exit_employe())
        self.btn_exit.setGeometry(QtCore.QRect(230, 230, 131, 51))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.btn_exit.setFont(font)
        self.btn_exit.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.btn_exit.setStyleSheet("background-color: rgb(196, 255, 234);")
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap("../../icons/icons/exit.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.btn_exit.setIcon(icon4)
        self.btn_exit.setIconSize(QtCore.QSize(20, 20))
        self.btn_exit.setObjectName("btn_exit")
        self.tabWidget.addTab(self.Exit, "")
        self.Edite = QtWidgets.QWidget()
        self.Edite.setObjectName("Edite")
        self.frame_4 = QtWidgets.QFrame(self.Edite)
        self.frame_4.setGeometry(QtCore.QRect(10, 10, 601, 531))
        self.frame_4.setStyleSheet("background-color: rgb(255, 242, 89);")
        self.frame_4.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_4.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_4.setObjectName("frame_4")
        self.add_employee_part = QtWidgets.QGroupBox(self.frame_4)
        self.add_employee_part.setGeometry(QtCore.QRect(30, 30, 541, 111))
        self.add_employee_part.setStyleSheet("background-color: rgb(255, 255, 127);")
        self.add_employee_part.setObjectName("add_employee_part")
        self.lbl_add_code = QtWidgets.QLabel(self.add_employee_part)
        self.lbl_add_code.setGeometry(QtCore.QRect(460, 30, 61, 20))
        self.lbl_add_code.setObjectName("lbl_add_code")
        self.enter_add_code = QtWidgets.QLineEdit(self.add_employee_part)
        self.enter_add_code.setGeometry(QtCore.QRect(270, 30, 171, 20))
        self.enter_add_code.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.enter_add_code.setObjectName("enter_add_code")
        self.btn_add = QtWidgets.QPushButton(self.add_employee_part,clicked=lambda:self.add_employe())
        self.btn_add.setGeometry(QtCore.QRect(50, 60, 131, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.btn_add.setFont(font)
        self.btn_add.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.btn_add.setStyleSheet("background-color: rgb(196, 255, 234);")
        icon5 = QtGui.QIcon()
        icon5.addPixmap(QtGui.QPixmap("../../icons/icons/add-user.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.btn_add.setIcon(icon5)
        self.btn_add.setIconSize(QtCore.QSize(20, 20))
        self.btn_add.setObjectName("btn_add")
        self.lbl_add_name = QtWidgets.QLabel(self.add_employee_part)
        self.lbl_add_name.setGeometry(QtCore.QRect(220, 30, 21, 20))
        self.lbl_add_name.setObjectName("lbl_add_name")
        self.enter_add_name = QtWidgets.QLineEdit(self.add_employee_part)
        self.enter_add_name.setGeometry(QtCore.QRect(40, 30, 161, 20))
        self.enter_add_name.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.enter_add_name.setObjectName("enter_add_name")
        self.lbl_add_family = QtWidgets.QLabel(self.add_employee_part)
        self.lbl_add_family.setGeometry(QtCore.QRect(450, 70, 71, 20))
        self.lbl_add_family.setObjectName("lbl_add_family")
        self.enter_add_family = QtWidgets.QLineEdit(self.add_employee_part)
        self.enter_add_family.setGeometry(QtCore.QRect(270, 70, 171, 20))
        self.enter_add_family.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.enter_add_family.setObjectName("enter_add_family")
        self.edite_employe_part = QtWidgets.QGroupBox(self.frame_4)
        self.edite_employe_part.setGeometry(QtCore.QRect(29, 170, 541, 221))
        self.edite_employe_part.setStyleSheet("background-color: rgb(255, 255, 127);")
        self.edite_employe_part.setObjectName("edite_employe_part")
        self.btn_search_for_edite = QtWidgets.QPushButton(self.edite_employe_part,clicked=lambda:self.search_for_edite_employe())
        self.btn_search_for_edite.setGeometry(QtCore.QRect(60, 40, 121, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.btn_search_for_edite.setFont(font)
        self.btn_search_for_edite.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.btn_search_for_edite.setStyleSheet("background-color: rgb(196, 255, 234);")
        self.btn_search_for_edite.setIcon(icon)
        self.btn_search_for_edite.setIconSize(QtCore.QSize(20, 20))
        self.btn_search_for_edite.setObjectName("btn_search_for_edite")
        self.lbl_code_search_for_Edite = QtWidgets.QLabel(self.edite_employe_part)
        self.lbl_code_search_for_Edite.setGeometry(QtCore.QRect(390, 50, 71, 16))
        self.lbl_code_search_for_Edite.setObjectName("lbl_code_search_for_Edite")
        self.enter_search_for_edite = QtWidgets.QLineEdit(self.edite_employe_part)
        self.enter_search_for_edite.setGeometry(QtCore.QRect(220, 40, 171, 31))
        self.enter_search_for_edite.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.enter_search_for_edite.setObjectName("enter_search_for_edite")
        self.lbl_code_edite = QtWidgets.QLabel(self.edite_employe_part)
        self.lbl_code_edite.setGeometry(QtCore.QRect(470, 110, 61, 20))
        self.lbl_code_edite.setObjectName("lbl_code_edite")
        self.btn_edite = QtWidgets.QPushButton(self.edite_employe_part,clicked=lambda:self.edite_employe())
        self.btn_edite.setGeometry(QtCore.QRect(60, 160, 121, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.btn_edite.setFont(font)
        self.btn_edite.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.btn_edite.setStyleSheet("background-color: rgb(196, 255, 234);")
        icon6 = QtGui.QIcon()
        icon6.addPixmap(QtGui.QPixmap("../../icons/icons/edite_icon.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.btn_edite.setIcon(icon6)
        self.btn_edite.setIconSize(QtCore.QSize(20, 20))
        self.btn_edite.setObjectName("btn_edite")
        self.lbl_name_edite = QtWidgets.QLabel(self.edite_employe_part)
        self.lbl_name_edite.setGeometry(QtCore.QRect(220, 110, 21, 20))
        self.lbl_name_edite.setObjectName("lbl_name_edite")
        self.enter_family_edite = QtWidgets.QLineEdit(self.edite_employe_part)
        self.enter_family_edite.setGeometry(QtCore.QRect(270, 170, 181, 20))
        self.enter_family_edite.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.enter_family_edite.setText("")
        self.enter_family_edite.setObjectName("enter_family_edite")
        self.lbl_family_edite = QtWidgets.QLabel(self.edite_employe_part)
        self.lbl_family_edite.setGeometry(QtCore.QRect(460, 170, 71, 20))
        self.lbl_family_edite.setObjectName("lbl_family_edite")
        self.enter_name_edite = QtWidgets.QLineEdit(self.edite_employe_part)
        self.enter_name_edite.setGeometry(QtCore.QRect(40, 110, 171, 20))
        self.enter_name_edite.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.enter_name_edite.setText("")
        self.enter_name_edite.setObjectName("enter_name_edite")
        self.enter_code_edite = QtWidgets.QLineEdit(self.edite_employe_part)
        self.enter_code_edite.setGeometry(QtCore.QRect(270, 110, 181, 20))
        self.enter_code_edite.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.enter_code_edite.setText("")
        self.enter_code_edite.setObjectName("enter_code_edite")
        self.delete_employe_part = QtWidgets.QGroupBox(self.frame_4)
        self.delete_employe_part.setGeometry(QtCore.QRect(30, 420, 541, 81))
        self.delete_employe_part.setStyleSheet("background-color: rgb(255, 255, 127);")
        self.delete_employe_part.setObjectName("delete_employe_part")
        self.lbl_delete_code = QtWidgets.QLabel(self.delete_employe_part)
        self.lbl_delete_code.setGeometry(QtCore.QRect(450, 30, 61, 20))
        self.lbl_delete_code.setObjectName("lbl_delete_code")
        self.enter_code_for_delete = QtWidgets.QLineEdit(self.delete_employe_part)
        self.enter_code_for_delete.setGeometry(QtCore.QRect(270, 30, 181, 20))
        self.enter_code_for_delete.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.enter_code_for_delete.setText("")
        self.enter_code_for_delete.setObjectName("enter_code_for_delete")
        self.btn_delete_employe = QtWidgets.QPushButton(self.delete_employe_part,clicked=lambda:self.delete_employe())
        self.btn_delete_employe.setGeometry(QtCore.QRect(60, 20, 121, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.btn_delete_employe.setFont(font)
        self.btn_delete_employe.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.btn_delete_employe.setStyleSheet("background-color: rgb(196, 255, 234);")
        self.btn_delete_employe.setIcon(icon1)
        self.btn_delete_employe.setIconSize(QtCore.QSize(20, 20))
        self.btn_delete_employe.setObjectName("btn_delete_employe")
        self.tabWidget.addTab(self.Edite, "")
        self.verticalLayout.addWidget(self.tabWidget)

        self.retranslateUi(control_arrivals_and_departures_employe)
        self.tabWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(control_arrivals_and_departures_employe)

    def show_data(self):

        connect=sqlite3.connect("controle_employe_university.db")

        # creat cursor
        my_cursor=connect.cursor() # for execute code

        # get all record
        my_cursor.execute("SELECT * FROM arrivals_and_departures")

        # insert record into records variable
        records=my_cursor.fetchall()

        # row of myTable
        self.tableWidget.setRowCount(len(records))

        # len row
        row=0

        for record in records:
            self.tableWidget.setItem(row,0,QtWidgets.QTableWidgetItem(str(record[0])))
            self.tableWidget.setItem(row,1,QtWidgets.QTableWidgetItem(record[1]))
            self.tableWidget.setItem(row,2,QtWidgets.QTableWidgetItem(record[2]))
            self.tableWidget.setItem(row,3,QtWidgets.QTableWidgetItem(record[3]))
            self.tableWidget.setItem(row,4,QtWidgets.QTableWidgetItem(record[4]))
            self.tableWidget.setItem(row,5,QtWidgets.QTableWidgetItem(record[5]))
            self.tableWidget.setItem(row,6,QtWidgets.QTableWidgetItem(record[6]))
            self.tableWidget.setItem(row,7,QtWidgets.QTableWidgetItem(record[7]))
            self.tableWidget.setItem(row,8,QtWidgets.QTableWidgetItem(record[8]))
            self.tableWidget.setItem(row,9,QtWidgets.QTableWidgetItem(record[9]))
            self.tableWidget.setItem(row,10,QtWidgets.QTableWidgetItem(record[10]))
            self.tableWidget.setItem(row,11,QtWidgets.QTableWidgetItem(str(record[11])))

            row+=1

        connect.commit()

    def enter_employe(self):

        try:
        
            connect=sqlite3.connect("controle_employe_university.db")

            # creat cursor
            my_cursor=connect.cursor() # for execute code

            # get employe info by id 
            my_cursor.execute("SELECT * FROM employe_table WHERE id=?",(self.enter_enter_code.text(),))

            # give employe info to data
            data=my_cursor.fetchone()
            data_list=list(data)

            my_date=datetime.date.today() # get current date 
            date_time=datetime.datetime.today() # get date and time 
            shamsi=jdatetime.date.fromgregorian(day=my_date.day,month=my_date.month,year=my_date.year) # convert to shamsi date
            hour_time=str(date_time.hour) # get current hour
            minute_time=str(date_time.minute) # get current minute
            second_time=str(date_time.second) # get current second
            time=f"{hour_time}:{minute_time}:{second_time}" # compare hour and minute and second

            # append date and time to data list
            data_list.append(time)
            data_list.append(shamsi)
            
            # send item in list to variable
            id=data_list[0]
            name=data_list[1]
            family=data_list[2]
            enter_time_1=data_list[3]
            shamsi_date_time=data_list[4]
            no_exit_time="ثبت نشده"
            no_enter_time="ثبت نشده"

            my_cursor.execute("SELECT * FROM arrivals_and_departures WHERE id=? AND date_time=?",(self.enter_enter_code.text(),str(shamsi_date_time)))

            my_all_id_data=my_cursor.fetchall()
            
            # this is for empty time
            if not my_all_id_data:

                my_cursor.execute("INSERT INTO arrivals_and_departures VALUES (?,?,?,?,?,?,?,?,?,?,?,?)",(id,name,family,enter_time_1,no_exit_time,no_enter_time,no_exit_time,no_enter_time,no_exit_time,no_enter_time,no_exit_time,str(shamsi_date_time)))
                connect.commit()

                self.enter_enter_code.clear()

            # this is for not empty time
            elif my_all_id_data:

                my_cursor.execute("SELECT * FROM arrivals_and_departures WHERE id=? AND date_time=?",(self.enter_enter_code.text(),str(shamsi_date_time)))

                # give employe info to data
                data=my_cursor.fetchall()

                for my_data in data:

                    if  my_data[5]=="ثبت نشده" and int(self.enter_enter_code.text())==my_data[0]:

                        if my_data[4]=="ثبت نشده":
                            info_msg = QMessageBox()
                            info_msg.setWindowTitle("اطلاعیه")
                            info_msg.setText("خروج اول ثبت نشده است")
                            info_msg.setIcon(QMessageBox.Information)

                            x = info_msg.exec_()

                            self.enter_enter_code.clear()

                        else:
                            my_cursor.execute("UPDATE arrivals_and_departures SET time_enter_2=? WHERE id=? AND date_time=?",(time,self.enter_enter_code.text(),str(shamsi_date_time)))

                            connect.commit()
                            self.enter_enter_code.clear()

                    elif my_data[7]=="ثبت نشده" and int(self.enter_enter_code.text())==my_data[0]:
                        
                        if my_data[6]=="ثبت نشده":
                            info_msg = QMessageBox()
                            info_msg.setWindowTitle("اطلاعیه")
                            info_msg.setText("خروج دوم ثبت نشده است")
                            info_msg.setIcon(QMessageBox.Information)

                            x = info_msg.exec_()

                            self.enter_enter_code.clear()


                        else:
                            my_cursor.execute("UPDATE arrivals_and_departures SET time_enter_3=? WHERE id=? AND date_time=?",(time,self.enter_enter_code.text(),str(shamsi_date_time)))

                            connect.commit()
                            self.enter_enter_code.clear()

                    elif my_data[9]=="ثبت نشده" and int(self.enter_enter_code.text())==my_data[0]:

                        if my_data[8]=="ثبت نشده":
                            info_msg = QMessageBox()
                            info_msg.setWindowTitle("اطلاعیه")
                            info_msg.setText("خروج سوم ثبت نشده است")
                            info_msg.setIcon(QMessageBox.Information)

                            x = info_msg.exec_()
                            self.enter_enter_code.clear()


                        else:

                            my_cursor.execute("UPDATE arrivals_and_departures SET time_enter_4=? WHERE id=? AND date_time=?",(time,self.enter_enter_code.text(),str(shamsi_date_time)))

                            connect.commit()
                            self.enter_enter_code.clear()

                    else:
                        info_msg = QMessageBox()
                        info_msg.setWindowTitle("اطلاعیه")
                        info_msg.setText("ظرفیت ورود و خروج کارمند تکمیل شد")
                        info_msg.setIcon(QMessageBox.Information)

                        x = info_msg.exec_()
                        self.enter_enter_code.clear()
            
        except TypeError:
            info_msg = QMessageBox()
            info_msg.setWindowTitle("اطلاعیه")
            info_msg.setText("کارمند با این مشخصات پیدا نشد")
            info_msg.setIcon(QMessageBox.Information)

            x = info_msg.exec_()
            self.enter_enter_code.clear()


    def exit_employe(self):

        connect=sqlite3.connect("controle_employe_university.db")

        # creat cursor
        my_cursor=connect.cursor() # for execute code

        date_time=datetime.datetime.today() # get date and time
        shamsi=jdatetime.date.fromgregorian(day=date_time.day,month=date_time.month,year=date_time.year) # convert to shamsi date
        hour_time=str(date_time.hour) # get current hour
        minute_time=str(date_time.minute) # get current minute
        second_time=str(date_time.second) # get current second
        time=f"{hour_time}:{minute_time}:{second_time}" # compare hour and minute and second


        my_cursor.execute("SELECT * FROM arrivals_and_departures WHERE id=? AND date_time=?",(self.enter_exit_code.text(),str(shamsi)))

        data=my_cursor.fetchall()

        for my_data in data:

            if  my_data[4]=="ثبت نشده" and int(self.enter_exit_code.text())==my_data[0]:

                if my_data[3]=="ثبت نشده":
                        info_msg = QMessageBox()
                        info_msg.setWindowTitle("اطلاعیه")
                        info_msg.setText("ورود اول ثبت نشده است")
                        info_msg.setIcon(QMessageBox.Information)

                        x = info_msg.exec_()

                        self.enter_exit_code.clear()

                else:
                    my_cursor.execute("UPDATE arrivals_and_departures SET time_exit_1=? WHERE id=? AND date_time=?",(time,self.enter_exit_code.text(),str(shamsi)))

                    connect.commit()
                    self.enter_exit_code.clear()

            elif my_data[6]=="ثبت نشده" and int(self.enter_exit_code.text())==my_data[0]:
                            
                    if my_data[5]=="ثبت نشده":
                        info_msg = QMessageBox()
                        info_msg.setWindowTitle("اطلاعیه")
                        info_msg.setText("ورود دوم ثبت نشده است")
                        info_msg.setIcon(QMessageBox.Information)

                        x = info_msg.exec_()

                        self.enter_exit_code.clear()


                    else:
                        my_cursor.execute("UPDATE arrivals_and_departures SET time_exit_2=? WHERE id=? AND date_time=?",(time,self.enter_exit_code.text(),str(shamsi)))

                        connect.commit()
                        self.enter_exit_code.clear()

            elif my_data[8]=="ثبت نشده" and int(self.enter_exit_code.text())==my_data[0]:

                if my_data[7]=="ثبت نشده":
                    info_msg = QMessageBox()
                    info_msg.setWindowTitle("اطلاعیه")
                    info_msg.setText("ورود سوم ثبت نشده است")
                    info_msg.setIcon(QMessageBox.Information)

                    x = info_msg.exec_()

                    self.enter_exit_code.clear()


                else:

                    my_cursor.execute("UPDATE arrivals_and_departures SET time_exit_3=? WHERE id=? AND date_time=?",(time,self.enter_exit_code.text(),str(shamsi)))

                    connect.commit()
                    self.enter_exit_code.clear()

            elif my_data[10]=="ثبت نشده" and int(self.enter_exit_code.text())==my_data[0]:

                if my_data[9]=="ثبت نشده":
                    info_msg = QMessageBox()
                    info_msg.setWindowTitle("اطلاعیه")
                    info_msg.setText("ورود چهارم ثبت نشده است")
                    info_msg.setIcon(QMessageBox.Information)

                    x = info_msg.exec_()

                    self.enter_exit_code.clear()


                else:
                    my_cursor.execute("UPDATE arrivals_and_departures SET time_exit_4=? WHERE id=? AND date_time=?",(time,self.enter_exit_code.text(),str(shamsi)))

                    connect.commit()
                    self.enter_exit_code.clear()

            else:
                info_msg = QMessageBox()
                info_msg.setWindowTitle("اطلاعیه")
                info_msg.setText("ظرفیت ورود و خروج کارمند تکمیل شد")
                info_msg.setIcon(QMessageBox.Information)

                x = info_msg.exec_()

                self.enter_enter_code.clear()
        


    def search_employe(self):

        connect=sqlite3.connect("controle_employe_university.db")

        # creat cursor
        my_cursor=connect.cursor() # for execute code

        my_cursor.execute("SELECT * FROM arrivals_and_departures WHERE id=?",(self.enter_search_code.text(),))

        data=my_cursor.fetchall()

        self.tableWidget.setRowCount(len(data))

        row=0

        for record in data:
            self.tableWidget.setItem(row,0,QtWidgets.QTableWidgetItem(str(record[0])))
            self.tableWidget.setItem(row,1,QtWidgets.QTableWidgetItem(record[1]))
            self.tableWidget.setItem(row,2,QtWidgets.QTableWidgetItem(record[2]))
            self.tableWidget.setItem(row,3,QtWidgets.QTableWidgetItem(record[3]))
            self.tableWidget.setItem(row,4,QtWidgets.QTableWidgetItem(record[4]))
            self.tableWidget.setItem(row,5,QtWidgets.QTableWidgetItem(record[5]))
            self.tableWidget.setItem(row,6,QtWidgets.QTableWidgetItem(record[6]))
            self.tableWidget.setItem(row,7,QtWidgets.QTableWidgetItem(record[7]))
            self.tableWidget.setItem(row,8,QtWidgets.QTableWidgetItem(record[8]))
            self.tableWidget.setItem(row,9,QtWidgets.QTableWidgetItem(record[9]))
            self.tableWidget.setItem(row,10,QtWidgets.QTableWidgetItem(record[10]))
            self.tableWidget.setItem(row,11,QtWidgets.QTableWidgetItem(str(record[11])))

            row+=1
        
        self.enter_search_code.clear()


    def delete_hand(self):

        connect=sqlite3.connect("controle_employe_university.db")

        # creat cursor
        my_cursor=connect.cursor() # for execute code)

        code_delete_hand=self.enter_code_for_delete_by_hand.text()
        enter_time_for_delete=self.enter_time_enter_for_delete_by_hand.text()

        # Delete data
        my_cursor.execute("DELETE FROM arrivals_and_departures WHERE id=? AND (time_enter_1=? OR time_enter_2=? OR time_enter_3=? OR time_enter_4=?)",(code_delete_hand,enter_time_for_delete,enter_time_for_delete,enter_time_for_delete,enter_time_for_delete))

        connect.commit()
        connect.close()

        self.enter_time_enter_for_delete_by_hand.clear()
        self.enter_code_for_delete_by_hand.clear()


    def add_employe(self):

        try:
        
            connect=sqlite3.connect("controle_employe_university.db")

            # creat cursor
            my_cursor=connect.cursor() # for execute code

            if self.enter_add_code.text()!="" and self.enter_add_name.text()!="" and self.enter_add_family.text()!="":


                add_code=self.enter_add_code.text()
                add_name=self.enter_add_name.text()
                add_family=self.enter_add_family.text()

                my_cursor.execute("INSERT INTO employe_table VALUES (?,?,?)",(add_code,add_name,add_family))

                connect.commit()
                connect.close()

                info_msg = QMessageBox()
                info_msg.setWindowTitle("اطلاعیه")
                info_msg.setText("اطلاعات کارمند ثبت شد")
                info_msg.setIcon(QMessageBox.Information)

                x = info_msg.exec_()

                self.enter_add_code.clear()
                self.enter_add_name.clear()
                self.enter_add_family.clear()

            else:
                info_msg = QMessageBox()
                info_msg.setWindowTitle("اطلاعیه")
                info_msg.setText("باید تمامی قسمت ها را پر کنید")
                info_msg.setIcon(QMessageBox.Information)

                x = info_msg.exec_()

        except sqlite3.IntegrityError:

            info_msg = QMessageBox()
            info_msg.setWindowTitle("اطلاعیه")
            info_msg.setText("کد کارمندی تکراری است")
            info_msg.setIcon(QMessageBox.Information)

            x = info_msg.exec_()


    def search_for_edite_employe(self):

        try:
            connect=sqlite3.connect("controle_employe_university.db")

            # creat cursor
            my_cursor=connect.cursor() # for execute code

            my_cursor.execute("SELECT * FROM employe_table WHERE id=?",(self.enter_search_for_edite.text(),))

            data=my_cursor.fetchone()

            self.enter_code_edite.setText(str(data[0]))
            self.enter_name_edite.setText(data[1])
            self.enter_family_edite.setText(data[2])

        except TypeError:
            info_msg = QMessageBox()
            info_msg.setWindowTitle("اطلاعیه")
            info_msg.setText("کد کارمندی پیدا نشد")
            info_msg.setIcon(QMessageBox.Information)

            x = info_msg.exec_()     


    def edite_employe(self):

        connect=sqlite3.connect("controle_employe_university.db")

            # creat cursor
        my_cursor=connect.cursor() # for execute code

        my_cursor.execute("UPDATE employe_table SET id=?, name=?, family=? WHERE id=?",(self.enter_code_edite.text(),self.enter_name_edite.text(),self.enter_family_edite.text(),self.enter_search_for_edite.text()))

        connect.commit()

        info_msg = QMessageBox()
        info_msg.setWindowTitle("اطلاعیه")
        info_msg.setText("اطلاعات کارمند تغییر شد")
        info_msg.setIcon(QMessageBox.Information)

        x = info_msg.exec_()

        self.enter_search_for_edite.clear()
        self.enter_code_edite.clear()
        self.enter_name_edite.clear()
        self.enter_family_edite.clear()


    def delete_employe(self):

        try:

            connect=sqlite3.connect("controle_employe_university.db")

                # creat cursor
            my_cursor=connect.cursor() # for execute code

            my_cursor.execute("DELETE FROM employe_table WHERE id=?",(self.enter_code_for_delete.text(),))

            connect.commit()

            info_msg = QMessageBox()
            info_msg.setWindowTitle("اطلاعیه")
            info_msg.setText("اطلاعات کارمند حذف شد")
            info_msg.setIcon(QMessageBox.Information)

            x = info_msg.exec_()

            self.enter_code_for_delete.clear()

        except sqlite3.OperationalError:

            info_msg = QMessageBox()
            info_msg.setWindowTitle("اطلاعیه")
            info_msg.setText("کد کارمندی یافت نشد")
            info_msg.setIcon(QMessageBox.Information)

            x = info_msg.exec_()

            self.enter_code_for_delete.clear()
            


    def delete_by_date(self):

        connect=sqlite3.connect("controle_employe_university.db")

        my_cursor=connect.cursor() # for execute code

        my_cursor.execute("DELETE FROM arrivals_and_departures WHERE date_time=?",(self.enter_date_time_delete.text(),))

        connect.commit()

        info_msg = QMessageBox()
        info_msg.setWindowTitle("اطلاعیه")
        info_msg.setText("اطلاعات موردنظر در این تاریخ حذف شد")
        info_msg.setIcon(QMessageBox.Information)

        x = info_msg.exec_()

        self.enter_date_time_delete.clear()


    def search_by_date(self):

        connect=sqlite3.connect("controle_employe_university.db")

        my_cursor=connect.cursor() # for execute code

        value=self.enter_date_search.text()

        my_cursor.execute("SELECT * FROM arrivals_and_departures WHERE date_time=?",(value,))

        data=my_cursor.fetchall()

        self.tableWidget.setRowCount(len(data))

        row=0

        for record in data:
            self.tableWidget.setItem(row,0,QtWidgets.QTableWidgetItem(str(record[0])))
            self.tableWidget.setItem(row,1,QtWidgets.QTableWidgetItem(record[1]))
            self.tableWidget.setItem(row,2,QtWidgets.QTableWidgetItem(record[2]))
            self.tableWidget.setItem(row,3,QtWidgets.QTableWidgetItem(record[3]))
            self.tableWidget.setItem(row,4,QtWidgets.QTableWidgetItem(record[4]))
            self.tableWidget.setItem(row,5,QtWidgets.QTableWidgetItem(record[5]))
            self.tableWidget.setItem(row,6,QtWidgets.QTableWidgetItem(record[6]))
            self.tableWidget.setItem(row,7,QtWidgets.QTableWidgetItem(record[7]))
            self.tableWidget.setItem(row,8,QtWidgets.QTableWidgetItem(record[8]))
            self.tableWidget.setItem(row,9,QtWidgets.QTableWidgetItem(record[9]))
            self.tableWidget.setItem(row,10,QtWidgets.QTableWidgetItem(record[10]))
            self.tableWidget.setItem(row,11,QtWidgets.QTableWidgetItem(str(record[11])))

            row+=1
        
        self.enter_date_search.clear()


    def save_Excel_file(self):

        connect=sqlite3.connect("controle_employe_university.db")

        my_cursor=connect.cursor() # for execute code

        my_cursor.execute("SELECT * FROM arrivals_and_departures")

        my_records=my_cursor.fetchall()

        with open(f"{self.enter_name_excel_file.text()}.csv","a",newline="",encoding="utf-8") as f:
            w=csv.writer(f,dialect="excel")

            for record in my_records:
                w.writerow(record)       

        self.enter_name_excel_file.clear()

        info_msg = QMessageBox()
        info_msg.setWindowTitle("اطلاعیه")
        info_msg.setText("فایل اکسل ذخیره شد")
        info_msg.setIcon(QMessageBox.Information)

        x = info_msg.exec_()



    def retranslateUi(self, control_arrivals_and_departures_employe):
        _translate = QtCore.QCoreApplication.translate
        self.search_box.setTitle(_translate("control_arrivals_and_departures_employe", "قسمت جستجو با کد کارمندی و تاریخ"))
        self.lbl_code_search.setText(_translate("control_arrivals_and_departures_employe", "کد کارمند:"))
        self.btn_search.setText(_translate("control_arrivals_and_departures_employe", "جستجو"))
        self.btn_search_by_date.setText(_translate("control_arrivals_and_departures_employe", "جستجو"))
        self.lbl_date_search.setText(_translate("control_arrivals_and_departures_employe", "تاریخ موردنظر :"))
        self.delete_box.setTitle(_translate("control_arrivals_and_departures_employe", "حذف داده ها"))
        self.btn_delete_by_hand.setText(_translate("control_arrivals_and_departures_employe", "حذف"))
        self.lbl_code_for_delete_by_hand.setText(_translate("control_arrivals_and_departures_employe", "کد کارمند:"))
        self.lbl_time_enter_for_delete_by_hand.setText(_translate("control_arrivals_and_departures_employe", "ساعت ورود :"))
        self.show_box.setTitle(_translate("control_arrivals_and_departures_employe", "نمایش"))
        item = self.tableWidget.horizontalHeaderItem(0)
        item.setText(_translate("control_arrivals_and_departures_employe", "ID"))
        item = self.tableWidget.horizontalHeaderItem(1)
        item.setText(_translate("control_arrivals_and_departures_employe", "نام"))
        item = self.tableWidget.horizontalHeaderItem(2)
        item.setText(_translate("control_arrivals_and_departures_employe", "نام خانوادگی"))
        item = self.tableWidget.horizontalHeaderItem(3)
        item.setText(_translate("control_arrivals_and_departures_employe", "ساعت ورود اول"))
        item = self.tableWidget.horizontalHeaderItem(4)
        item.setText(_translate("control_arrivals_and_departures_employe", "ساعت خروج اول"))
        item = self.tableWidget.horizontalHeaderItem(5)
        item.setText(_translate("control_arrivals_and_departures_employe", "ساعت ورود دوم"))
        item = self.tableWidget.horizontalHeaderItem(6)
        item.setText(_translate("control_arrivals_and_departures_employe", "ساعت خروج دوم"))
        item = self.tableWidget.horizontalHeaderItem(7)
        item.setText(_translate("control_arrivals_and_departures_employe", "ساعت ورود سوم"))
        item = self.tableWidget.horizontalHeaderItem(8)
        item.setText(_translate("control_arrivals_and_departures_employe", "ساعت خروج سوم"))
        item = self.tableWidget.horizontalHeaderItem(9)
        item.setText(_translate("control_arrivals_and_departures_employe", "ساعت ورود چهارم"))
        item = self.tableWidget.horizontalHeaderItem(10)
        item.setText(_translate("control_arrivals_and_departures_employe", "ساعت خروج چهارم"))
        item = self.tableWidget.horizontalHeaderItem(11)
        item.setText(_translate("control_arrivals_and_departures_employe", "تاریخ ثبت اطلاعات"))
        self.btn_show_data.setText(_translate("control_arrivals_and_departures_employe", "نمایش"))
        self.btn_save_excel.setText(_translate("control_arrivals_and_departures_employe", "ذخیره فایل با اکسل"))
        self.lbl_Excel.setText(_translate("control_arrivals_and_departures_employe", "نام فایل اکسل :"))
        self.groupBox.setTitle(_translate("control_arrivals_and_departures_employe", "حذف داده ها بر اساس تاریخ"))
        self.lbl_delete_by_date_time.setText(_translate("control_arrivals_and_departures_employe", "تاریخ :"))
        self.btn_delete_by_date_time.setText(_translate("control_arrivals_and_departures_employe", "حذف"))
        self.label.setText(_translate("control_arrivals_and_departures_employe", "سیستم کنترل ورود و خروج کارکنان دانشگاه آزاد اسلامی واحد مهاباد"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.showdata), _translate("control_arrivals_and_departures_employe", "نمایش"))
        self.enter_part.setTitle(_translate("control_arrivals_and_departures_employe", "قسمت ورود"))
        self.lbl_enetr_code.setText(_translate("control_arrivals_and_departures_employe", "کد  کارمند : "))
        self.btn_enter.setText(_translate("control_arrivals_and_departures_employe", "ورود"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.enter), _translate("control_arrivals_and_departures_employe", "ورود"))
        self.exit_part.setTitle(_translate("control_arrivals_and_departures_employe", "قسمت ورود"))
        self.lbl_exit_code.setText(_translate("control_arrivals_and_departures_employe", "کد  کارمند : "))
        self.btn_exit.setText(_translate("control_arrivals_and_departures_employe", "خروج"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.Exit), _translate("control_arrivals_and_departures_employe", "خارج شدن"))
        self.add_employee_part.setTitle(_translate("control_arrivals_and_departures_employe", "اضافه کردن کارمند"))
        self.lbl_add_code.setText(_translate("control_arrivals_and_departures_employe", "کد  کارمند : "))
        self.btn_add.setText(_translate("control_arrivals_and_departures_employe", "اضافه کردن"))
        self.lbl_add_name.setText(_translate("control_arrivals_and_departures_employe", "نام : "))
        self.lbl_add_family.setText(_translate("control_arrivals_and_departures_employe", "نام خانوادگی : "))
        self.edite_employe_part.setTitle(_translate("control_arrivals_and_departures_employe", "ویرایش اطلاعات کارمند"))
        self.btn_search_for_edite.setText(_translate("control_arrivals_and_departures_employe", "جستجو برای ویرایش"))
        self.lbl_code_search_for_Edite.setText(_translate("control_arrivals_and_departures_employe", "کد کارمند:"))
        self.lbl_code_edite.setText(_translate("control_arrivals_and_departures_employe", "کد  کارمند : "))
        self.btn_edite.setText(_translate("control_arrivals_and_departures_employe", "ویرایش اطلاعات"))
        self.lbl_name_edite.setText(_translate("control_arrivals_and_departures_employe", "نام : "))
        self.lbl_family_edite.setText(_translate("control_arrivals_and_departures_employe", "نام خانوادگی : "))
        self.delete_employe_part.setTitle(_translate("control_arrivals_and_departures_employe", "حذف کارمندان"))
        self.lbl_delete_code.setText(_translate("control_arrivals_and_departures_employe", "کد کارمند : "))
        self.btn_delete_employe.setText(_translate("control_arrivals_and_departures_employe", "حذف کارمند"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.Edite), _translate("control_arrivals_and_departures_employe", "ویرایش "))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    control_arrivals_and_departures_employe = QtWidgets.QDialog()
    ui = Ui_control_arrivals_and_departures_employe()
    ui.setupUi(control_arrivals_and_departures_employe)
    control_arrivals_and_departures_employe.show()
    sys.exit(app.exec_())
